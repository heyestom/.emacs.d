#+title Emacs configuration via org-babel
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

This is and probably always will be a work in progress! :-) 

* Manual steps
There are some steps that require some manual intervention.

** Aspell - spellcheck

~aspell~ needs to be install via ~brew~ / ~apt~ however!

** lsp 
Installing specfic LSP language servers.
Clojure can be done from within emacs vai ~M-x lsp-install-server~

Some langages require extra setup...

* hacks for osx...
#+begin_src emacs-lisp
  (setq image-types (cons 'svg image-types))
  (add-to-list 'default-frame-alist '(undecorated-round . t))
#+end_src

* Vanilla configuration

#+begin_src emacs-lisp
  ;; Don't show the splash screen
  (setq inhibit-startup-message t)

  ;; flash on error / warnings
  (setq visible-bell t)

  ;; turn off some gui features
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)

  (display-fill-column-indicator-mode -1)

  ;; highlight the current line
  (hl-line-mode t)

  ;; Add some space 
  (set-fringe-mode 10)

  ;; line numbers
  ;; (global-display-line-numbers-mode t)

  ;; show the column in mode line
  (column-number-mode 1)

  ;; wrap lines everywhere
  (global-visual-line-mode 1)

  ;; hide the mode line... lets try this
  ;; (global-hide-mode-line-mode)

  ;; for osx 
   (setq frame-resize-pixelwise t)

  ;; (setq right-margin-width 0)
  ;; (setq left-margin-width 0)

  ;; (set-window-buffer nil (current-buffer))
  (set-face-foreground 'vertical-border "#3b4252")
  (window-divider-mode 0)

  (add-to-list 'default-frame-alist '(internal-border-width . 0))

  ;; keep buffers synced with disc 
  (global-auto-revert-mode 1)

  ;; auto save buffers 
  (auto-save-visited-mode 1)

  ;; spit the auto backups into /tmp
  (setq backup-directory-alist '((".*" . "~/tmp")))

#+end_src

* Run emcas as a server?
Don't do it this way...
Better to use the --daemon flag
Better still to use systemctl 
#+begin_src emacs-lisp
;;  (server-start)
#+end_src

* Package management

Tell emacs where to search for external packages
#+begin_src emacs-lisp
  ;; Initialize package sources and ensure use-package
  (require 'package)

  (setq package-archives '(("melpa"  . "https://melpa.org/packages/")
  			 ("org"    . "https://orgmode.org/elpa/")
  			 ("elpa"   . "https://elpa.gnu.org/packages/")
  			 ("nongnu" . "https://elpa.nongnu.org/nongnu/")))

  (package-initialize) 

  (unless (and package-archive-contents (package-installed-p 'use-package))
    (package-refresh-contents)
    (package-install 'use-package))
    (eval-when-compile (require 'use-package))

  (require 'use-package)
  ;; ensure all use package packages are downlaoded
  (setq use-package-always-ensure t)

  ;; quelpa is a tool to compile and install Emacs Lisp packages locally from local or remote source code. https://github.com/quelpa/quelpa

  (use-package quelpa)

#+end_src

* Theme
Make it look good :-)

I like monokai-theme makes me feel like I'm using sublime text 2 again in university.

#+begin_src emacs-lisp
  (use-package monokai-theme)
  ;;(load-theme 'monokai t)
#+end_src

I really like monokai-theme as the default but with direct light on my monitor it is hard to read. [[https://github.com/doomemacs/themes][Doom themes]] are awesome and provide a choice of lighter themes to swap to when needed.

#+begin_src emacs-lisp
  (use-package doom-themes
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
  	    doom-themes-enable-italic t) ; if nil, italics is universally disabled
    ;; (load-theme 'doom-one-light t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

  ;;  (load-theme 'doom-nord t)
  ;;  (load-theme 'doom-gruvbox t)

#+end_src


Dynamic theme with ewal + wallust 
#+begin_src emacs-lisp
  (use-package ewal
    :init (setq ewal-use-built-in-always-p nil
                ewal-use-built-in-on-failure-p t
  	      ewal-json-file "~/.cache/wallust/colors.json"
                ewal-built-in-palette "sexy-material"))
  (use-package ewal-doom-themes
    :ensure t)
  (load-theme 'ewal-doom-one t)
#+end_src    

#+RESULTS:
: t



* Icons!

#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))

  ;; (all-the-icons-install-fonts t)
#+end_src

* Mode line

Turns out Doom also has the best easy drop in mode line package with [[https://github.com/seagle0128/doom-modeline#use-package][doom-modeline]]. 
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))
#+end_src

* Start up buffers
What to show when opening Emacs without specifying a file. 

There are packages to define what gets shown when Emacs initially loads. Actually I think I might not actually even need a package I'm sure there is some configuration.

Ideas :
- Agenda + prompt to start a journal entry if there isn't one for the day say far probably via yasnippet or an org capture template
- Something similar to Doom which gives you a few sensible links, recent projects / files etc.
- Email inbox
- Hacker news / Reddit / RSS feed lots of options 




* PATH configuration
Ensure emacs uses the shell path so we can access user bins
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
     :config (exec-path-from-shell-initialize))
#+end_src



* Vertico completion

#+begin_src emacs-lisp
  (use-package vertico
  :custom
  ;; (vertico-scroll-margin 0) ;; Different scroll margin
  ;; (vertico-count 20) ;; Show more candidates
  (vertico-resize t) ;; Grow and shrink the Vertico minibuffer
  (vertico-cycle t) ;; Enable cycling for `vertico-next/previous'
  :init
  (vertico-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package orderless
  :custom
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch))
  ;; (orderless-component-separator #'orderless-escapable-split-on-space)
  (completion-styles '(orderless basic))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles partial-completion)))))
#+end_src

#+RESULTS:

#+begin_src emacs-lisp
(use-package consult
  ;; Replace bindings. Lazily loaded by `use-package'.
  :bind (;; C-c bindings in `mode-specific-map'
         ("C-c M-x" . consult-mode-command)
         ("C-c h" . consult-history)
         ("C-c k" . consult-kmacro)
         ("C-c m" . consult-man)
         ("C-c i" . consult-info)
         ([remap Info-search] . consult-info)
         ;; C-x bindings in `ctl-x-map'
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ;; M-g bindings in `goto-map'
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings in `search-map'
         ("M-s d" . consult-find)                  ;; Alternative: consult-fd
         ("M-s c" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Tweak the register preview for `consult-register-load',
  ;; `consult-register-store' and the built-in commands.  This improves the
  ;; register formatting, adds thin separator lines, register sorting and hides
  ;; the window mode line.
  (advice-add #'register-preview :override #'consult-register-window)
  (setq register-preview-delay 0.5)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key "M-.")
  ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep consult-man
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key "M-."
   :preview-key '(:debounce 0.4 any))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; "C-+"

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (keymap-set consult-narrow-map (concat consult-narrow-key " ?") #'consult-narrow-help)
)
#+end_src

Embark

#+begin_src emacs-lisp
  (use-package embark
  :ensure t

  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  ;; Show the Embark target at point via Eldoc. You may adjust the
  ;; Eldoc strategy, if you want to see the documentation from
  ;; multiple providers. Beware that using this can be a little
  ;; jarring since the message shown in the minibuffer can be more
  ;; than one line, causing the modeline to move up and down:

  ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
  ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

  ;; Add Embark to the mouse context menu. Also enable `context-menu-mode'.
  ;; (context-menu-mode 1)
  ;; (add-hook 'context-menu-functions #'embark-context-menu 100)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :ensure t ; only need to install it, embark loads it after consult if found
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

#+RESULTS:
| consult-preview-at-point-mode |



* Rich annotations with Marginalia
Add a desecration / summary of the commands shown in the mini buffer.
#+begin_src emacs-lisp
  (use-package marginalia
    ;; Either bind `marginalia-cycle` globally or only in the minibuffer
    :bind (("M-A" . marginalia-cycle)
	   :map minibuffer-local-map
	   ("M-A" . marginalia-cycle))

    ;; The :init configuration is always executed (Not lazy!)
    :init
    ;; Must be in the :init section of use-package such that the mode gets
    ;; enabled right away. Note that this forces loading the package.
    (marginalia-mode))
#+end_src

* Which key - suggest key chord completion
Opens the mini buffer with suggestions of what valid key chords are available 
#+begin_src emacs-lisp
  (use-package which-key
    :defer 0
    :diminish which-key-modeq
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))
#+end_src

* Projectile - project management
Emacs project management tools based on version control or certain build tools like package.json I believe. 
https://docs.projectile.mx/projectile/index.html
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :diminish projectile-mode
    :init
    (projectile-mode +1)
    :bind (:map projectile-mode-map
		("C-c p" . projectile-command-map))
    :init
    (setq projectile-project-search-path '("~/Projects/")))

  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))
#+end_src

** TODO counsel keybindings not properly set up

* Magit - git wrapper

Emacs does Git really well with Magit. 

#+begin_src emacs-lisp
  (use-package magit
       :bind ("C-x g" . magit-status)
       :commands (magit-status magit-get-current-branch))
#+end_src

* flycheck - linting / syntax checkisng etc
https://www.flycheck.org/en/latest/
#+begin_src emacs-lisp
  (use-package flycheck
    :init (global-flycheck-mode))

#+end_src

* Spellchecking

Please fix my dyslexia computer! 

#+begin_src emacs-lisp
  (add-hook 'text-mode-hook 'flyspell-mode)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)

  (setq ispell-dictionary "en_GB")
  (setq ispell-program-name "aspell")
  (setq ispell-silently-savep t)

  (use-package flyspell-correct
    :after flyspell
    :bind (:map flyspell-mode-map ("C-;" . flyspell-correct-wrapper)))

  (use-package flyspell-correct-popup
    :after flyspell-correct)
#+end_src


* Tree sitter

This is straight form [[https://github.com/mickeynp/combobulate][combobulate]]

#+begin_src emacs-lisp

  (use-package treesit-auto
    :ensure t
    :commands global-treesit-auto-mode
    :custom
    (treesit-auto-install 'prompt)
    :config
    (treesit-auto-add-to-auto-mode-alist 'all)
    (global-treesit-auto-mode +1))


  (add-to-list 'auto-mode-alist '("\\.tsx\\'" . tsx-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.jsx\\'" . tsx-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.js\\'" . typescript-ts-mode))
#+end_src

* LSP mode - IDE features

#+begin_src emacs-lisp
(use-package yaml-mode)  
#+end_src


#+begin_src emacs-lisp
  (use-package lsp-mode
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l"
  	gc-cons-threshold 100000000
  	read-process-output-max (* 1024 1024))
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
  	 (lsp-mode . lsp-diagnostics-mode)
  	 (clojure-mode . lsp)
  	 (terraform-mode . lsp)
  	 ((tsx-ts-mode typescript-ts-mode js-ts-mode) . lsp-deferred)
  	 ;; if you want which-key integration
  	 (lsp-mode . lsp-enable-which-key-integration)
  	 )
    :commands lsp)

  ;; optionally
  (use-package lsp-ui :commands lsp-ui-mode)
  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

  ;; optionally if you want to use debugger
  ;;  (use-package dap-mode)
  ;; (use-package dap-LANGUAGE) to load the dap adapter for your language

  ;; (lsp-install-server nil 'clojure-lsp)

#+end_src


* AI assistance

# Co pilot 
# #+begin_src emacs-lisp
#   (use-package copilot
#   :vc (:url "https://github.com/copilot-emacs/copilot.el"
#             :rev :newest
#             :branch "main"))

#   (add-hook 'prog-mode-hook 'copilot-mode)
#   (define-key copilot-completion-map (kbd "<tab>") 'copilot-accept-completion)

# #+end_src


* Yasnippet
[[https://joaotavora.github.io/yasnippet/][Yet another snippet extension]]

#+begin_quote
YASnippet is a template system for Emacs. It allows you to type an abbreviation and automatically expand it into function templates.
#+end_quote

#+begin_src emacs-lisp
  (use-package yasnippet)
  (use-package yasnippet-snippets)

  (yas-global-mode 1)
#+end_src

* Clojure packages
                             
#+begin_src emacs-lisp
  (use-package rainbow-delimiters)
  (use-package smartparens)
  (use-package idle-highlight-mode) 
  (use-package flycheck-clojure)
  (use-package flycheck-clj-kondo)

  (use-package flycheck-pos-tip
    :after flycheck)

  (eval-after-load 'flycheck
    '(setq flycheck-display-errors-function #'flycheck-pos-tip-error-messages))


  (use-package flycheck-clojure
    :defer t
    :commands (flycheck-clojure-setup)               ;; autoload
    :config
    (eval-after-load 'flycheck
      '(setq flycheck-display-errors-function #'flycheck-pos-tip-error-messages))
    (add-hook 'after-init-hook #'global-flycheck-mode))

  (use-package clojure-mode
    :config
    (require 'flycheck-clj-kondo)
    :mode (("\\.clj\\'" . clojure-mode)
	   ("\\.edn\\'" . clojure-mode))
    :init
    (add-hook 'clojure-mode-hook #'subword-mode)           
    (add-hook 'clojure-mode-hook #'smartparens-mode)       
    (add-hook 'clojure-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'clojure-mode-hook #'eldoc-mode)             
    (add-hook 'clojure-mode-hook #'idle-highlight-mode))

  (use-package clj-refactor
    :defer t
    :ensure t
    :diminish clj-refactor-mode
    :config (cljr-add-keybindings-with-prefix "C-c C-m"))

  (use-package cider
    :ensure t
    :defer t
    :init (add-hook 'cider-mode-hook #'clj-refactor-mode)
    :diminish subword-mode
    :config
    (setq nrepl-log-messages t                  
	  cider-repl-use-clojure-font-lock t    
	  cider-prompt-save-file-on-load 'always-save
	  cider-font-lock-dynamically '(macro core function var)
	  nrepl-hide-special-buffers t            
	  cider-overlays-use-font-lock t)
    (flycheck-clojure-setup)
    (cider-repl-toggle-pretty-printing))
#+end_src

* Org mode - very meta!!!

[[https://orgmode.org/][Org Mode]] is really hard to describe as it does /a lot/ and has a load of extensions.  At it's core Org Mode is an outlining tool.  It defines headers that you can nest and open / collapse.  Built on top of that is a system for scheduling, having different work states like TODO / DONE etc, agendas and exporting files to different formats.  Org sort of does a bit of everything. 

** Fundamental key binds 
#+begin_src emacs-lisp
  ;; org-mode
  (use-package org)
  (global-set-key (kbd "C-c l") #'org-store-link)
  (global-set-key (kbd "C-c a") #'org-agenda)
  (global-set-key (kbd "C-c c") #'org-capture)

#+end_src

** Org agenda path

#+begin_src emacs-lisp
  (setq org-agenda-files (directory-files-recursively "~/org/" "\\.org$"))
#+end_src


** Org todo keywords
#+begin_src emacs-lisp
  (setq org-todo-keywords
  	'((sequence "INBOX(i)" "TODO(t)" "WAIT(w@/!)" "BLOG(b)" "PROJECT(p)" "AREA(a)" "READ(r)" "|" "DONE(d!)" "CANCELED(c@)")))
  (setq org-log-done 'time)

#+end_src

** Org refile
Moving headlines around

#+begin_src emacs-lisp
  (setq org-refile-targets '(("~/org/personal/personal.org" :maxlevel . 2)))
#+end_src

** Org Babel
Languages to load 
#+begin_src emacs-lisp
  (eval-after-load 'org
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((clojure . t)
     (emacs-lisp . t)
     (shell . t))))
#+end_src

Org Babel Clojure back-end - defer to cider which requires jack in 
#+begin_src emacs-lisp
  (setq org-babel-clojure-backend 'cider)
#+end_src

Auto tangle - saves you needing to explicitly tangle org files. 
#+begin_src emacs-lisp
  (use-package org-auto-tangle
   :defer t
   :hook (org-mode . org-auto-tangle-mode))

  (setq org-auto-tangle-default t)
#+end_src

** Org modern - styling package

#+begin_src emacs-lisp
  ;;;; org modern - clean theme 
  (use-package org-modern
    :init
    (add-hook 'org-mode-hook #'org-modern-mode)
    (add-hook 'org-agenda-finalize-hook #'org-modern-agenda))

  ;; Choose some fonts
  (set-face-attribute 'default nil :family "Hack Nerd Font Mono"  :height 110)
  (set-face-attribute 'variable-pitch nil :family "Hack Nerd Font" :height 110)
  (set-face-attribute 'org-modern-symbol nil :family "Hack Nerd Font Mono" :height 110)

  (modify-all-frames-parameters '((right-divider-width . 40)))
  (dolist (face '(window-divider
  		window-divider-first-pixel
  		window-divider-last-pixel))
    (face-spec-reset-face face)
    (set-face-foreground face (face-attribute 'default :background)))
  (set-face-background 'fringe (face-attribute 'default :background))

  (setq
   ;; Edit settings
   org-auto-align-tags nil
   org-tags-column 0
   org-catch-invisible-edits 'show-and-error
   org-special-ctrl-a/e t
   org-insert-heading-respect-content t

   ;; Org styling, hide markup etc.
   org-hide-emphasis-markers t
   org-pretty-entities t
   org-ellipsis " ↯"

   ;; Agenda styling
   org-agenda-tags-column 0
   org-agenda-block-separator ?─
   org-agenda-time-grid
   '((daily today require-timed)
     (800 1000 1200 1400 1600 1800 2000)
     " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
   org-agenda-current-time-string
   " now ─────────────────────────────────────────────────")


  (set-face-foreground 'vertical-border "#3b4252")
  (window-divider-mode 0)

#+end_src

** Inline images
Don't use the real image width for inline images - images are rendered WAAAAAY too large to be useful in org files. 
#+begin_src emacs-lisp
  (setq org-image-actual-width 400)
#+end_src

** Centre text while working with org files
#+begin_src emacs-lisp

  (use-package visual-fill-column
    :hook (org-mode .  (lambda ()
			 (setq visual-fill-column-width 100
			       visual-fill-column-center-text t)
			 (visual-fill-column-mode 1)
			 )))

  #+end_src

** Org Kanban
#+begin_src emacs-lisp
  (use-package org-kanban)
#+end_src

** Capture Templates

#+begin_src emacs-lisp

  (setq org-capture-templates
        '(("i" "Inbox" entry (file+headline "~/org/personal/personal.org" "Inbox")
  	   "* INBOX %?
  :PROPERTIES:
  :CAPTURED: %U
  :END:
    " :empty-lines 1)
  	("r" "Read" entry (file+headline "~/org/personal/personal.org" "Reading List")
  	 "* READ %?
  :PROPERTIES:
  :CAPTURED: %U
  :END:
    " :empty-lines 1)
  	("p" "Project [0/2]" entry (file+headline "~/org/personal/personal.org" "Projects")
  	   "* PROJECT %? :projectTag: \nDEADLINE: %t \n:PROPERTIES: \n:CAPTURED: %U \n:END: \n** INBOX first task\n** INBOX second task
    " :empty-lines 1)
  	  ("j" "Journal" entry (file+olp+datetree "~/org/personal/journal.org")
  	   "* %?\nEntered on %U\n  %i\n" :empty-lines 1)
  	  ("J" "Journal entry at time" entry (file+olp+datetree "~/org/personal/journal.org")
  	   "* %T %?\n%i\n" :time-prompt t :empty-lines 1)

  	  ("w" "work")
  	  ("wj" "Work Journal" entry (file+olp+datetree "~/org/work/kroo-journal.org")
  	   "* %?\nEntered on %U\n  %i\n" :empty-lines 1)
  	  ("wJ" "Work Journal entry at time" entry (file+olp+datetree "~/org/work/kroo-journal.org")
  	   "* %T %?\n%i\n%a" :time-prompt t :empty-lines 1)
  	  ("wt" "Work Ticket" entry (file+headline "~/org/work/kroo-journal.org" "Tickets")
  	   "* TODO  %?\nEntered on %U\n  %i\n  %a" :empty-lines 1)
      ))


#+end_src

*** Capture templates for Hugo blog posts
#+begin_src emacs-lisp
  ;; Populates only the EXPORT_FILE_NAME property in the inserted heading.
  (with-eval-after-load 'org-capture
    (defun org-hugo-new-subtree-post-capture-template ()
      "Returns `org-capture' template string for new Hugo post.
  See `org-capture-templates' for more information."
      (let* ((title (read-from-minibuffer "Post Title: ")) ;Prompt to enter the post title
  	   (description (read-from-minibuffer "Post Description: ")) ;Prompt to enter the post description
  	   (fname (org-hugo-slug (concat (format-time-string "%d-%m-%Y") "-" title))))
        (mapconcat #'identity
  		 `(
  		   ,(concat "* TODO " title)
  		   ":PROPERTIES:"
  		   ,(concat ":EXPORT_FILE_NAME: " fname)
  		   ,(concat ":EXPORT_DESCRIPTION: " description)
  		   ":END:"
  		   "%?\n")          ;Place the cursor here 
  		 "\n")))

    (add-to-list 'org-capture-templates
  	       '("h" "Hugo post"))
    (add-to-list 'org-capture-templates    
  	       '("hc" "Coding Clojure"
  		 entry
  		 (file+olp "~/org/blog-posts/coding-clojure/coding-clojure.org" "posts")
  		 (function org-hugo-new-subtree-post-capture-template)))
    (add-to-list 'org-capture-templates    
  		 '("ht" "they.es"
  		   entry
  		   (file+olp "~/org/blog-posts/they.es/theyes-blog.org" "Blog Section")
  		   (function org-hugo-new-subtree-post-capture-template)
  		   :prepend t)))

#+end_src


** Expert dispatch extension - ox hugo 
#+begin_src emacs-lisp
  ;; export to hugo 
  (use-package ox-hugo
    :pin melpa 
    :after ox)

  (setq org-hugo-external-file-extensions-allowed-for-copying
    '("jpg" "jpeg" "tiff" "png" "svg" "gif" "bmp" "mp4" "pdf" "odt" "doc"
      "ppt" "xls" "docx" "pptx" "xlsx" "webp"))

#+end_src


** Org TWBS - quick html view
Export org-mode docs as HTML compatible with Twitter Bootstrap.
Pretty and quick exports - useful for sharing org files with other people in a pretty way. 
https://github.com/marsmining/ox-twbs 
#+begin_src emacs-lisp
  (use-package ox-twbs)
#+end_src

** Org Roam - note taking - knowledge base

#+begin_src emacs-lisp
  (use-package org-roam
    :custom
    (org-roam-directory (file-truename "~/org/roam/"))
    (org-roam-capture-templates
     '(("d" "default" plain
  	"%?"
  	:if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title} \n\n\n#+print_bibliography:")
  	:unnarrowed t)))
    :bind (("C-c n l" . org-roam-buffer-toggle)
  	   ("C-c n f" . org-roam-node-find)
  	   ("C-c n g" . org-roam-graph)
  	   ("C-c n i" . org-roam-node-insert)
  	   ("C-c n c" . org-roam-capture)
  	   ;; Dailies
  	   ("C-c n j" . org-roam-dailies-capture-today))
    :config
    ;; If you're using a vertical completion framework, you might want a more informative completion interface
    (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
    (org-roam-db-autosync-mode)
    ;; If using org-roam-protocol
    ;;(require 'org-roam-protocol)
    )

#+end_src

*** Org Roam UI 

#+begin_src emacs-lisp
  (use-package org-roam-ui

    :after org-roam
    ;; normally we'd recommend hooking orui after org-roam, but since org-roam does not have
    ;; a hookable mode anymore, you're advised to pick something yourself
    ;; if you don't care about startup time, use
    :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
  	  org-roam-ui-follow t
  	  org-roam-ui-update-on-save t
  	  org-roam-ui-open-on-start t))
#+end_src


*** TODO Investigate mobile syncing 

** Org cite

#+begin_src emacs-lisp
  (require 'oc-natbib)
  (require 'oc-biblatex)
  (setq org-cite-export-processors '((latex biblatex)
  				     (t basic)))
  (setq org-cite-global-bibliography '("~/org/roam/references/master-lib.bib"))

  (use-package citeproc)
#+end_src

* Vterm - terminal

[[https://github.com/akermu/emacs-libvterm][Vterm]] is a great terminal emulator that runs inside of Emacs. It feels the closest to a regular terminal application inside of Emacs and is also really fast. 

[[https://github.com/suonlight/multi-vterm][Multi-vterm]] enables multiple Vterm buffers 

#+begin_src emacs-lisp
      (use-package vterm
        :custom
        (vterm-always-compile-module t))

      (use-package hide-mode-line)

      (use-package multi-vterm
        :config
        (add-hook 'vterm-mode-hook
    	      (lambda () 
    		(hide-mode-line-mode)
    		)))

#+end_src
